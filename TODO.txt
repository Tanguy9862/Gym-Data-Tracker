- Modification de la gestion du RPE OK

- Prise en compte du BW OK

- Affichage des graphiques
	* https://plotly.com/python/line-charts/
	- Graphique 1/2/3 Reps OK
	- Graphique 10/15/20 Reps OK
	- Graphique (RPE - charge ; 2 ordonnées) en fn de la date
	- Graphique page track_rm : Graphique montrant le PR(en kg) avec en abscisse la date, 1 courbe par lift, avec en text le BW
		-> https://plotly.com/python/line-and-scatter/ -> 'Connected Scatterplots'

	- [OK] Graphique (Wilks ; BW)
		-> Route WILKS OK
		-> Prise en compte du genre lors de l'inscription OK
		-> Page paramètres pour enregistrer son BW OK
			-> Etre capable de sortir le plus récent BW enregistré valable pour l'associer aux nouveaux PR enregistrés] OK
				-> Empêcher le fait d'ajouter des PR si on n'a jamais enregistré son BW OK

		-> Page pour ajouter ses PR MAX 1 rep OK
		-> Table User : ajouter colonne genre OK
		-> Table Wilks : colonne user_id + date + max_bench + max_dl 
				+ max_squat + bw + wilks OK

	- [OK] Page tracker ses PR:
		-> 1 df par exercice avec date + pr OK
		-> Pourvoir supprimer ses PR déjà ajoutés OK
		-> 1 graphique général regroupant l'évolution des PR des 3 lifts en fn de la date OK
		-> Ajout dans le graphique : avec en text le BW OK
		    	-> https://plotly.com/python/line-and-scatter/ -> 'Connected Scatterplots' OK

	-  * Page WILKS : 
		[1]: [OK]
            -> DF avec colonne bw/pr squat/pr bench/pr deadlift/total/wilk (le wilk est calculé seulement s'il y a une value dans les 3 lift) OK
            -> Graphique RM/mouvement (du genre histogramme 3 barres, 1 par lift, abs=lift nom, ord=charge) OK
            -> Graphique x: bw, y: wilks OK
            *-> Quand on s'apprête à ajouter un PR sur la page edit_rm, afficher le poids du corps auquel celui-ci sera ajouté OK
            -> pas oublier de terminer la catégorie "Page tracker ses PR" OK
         [2]:
            -> Garder une trace des anciens WILKS associés à 1 BW (peut-être les sauvegarder dans une table ? user_id/date/bw/wilks)
                -> Pour récupérer les données il s'agirait juste d'interroger la db
            -> En faire un DF : date/bw/wilks
            -> Afficher sur la Page WILKS l'évolution des WILKS en fonction de la date, 1 courbe par BW

         [3]:
            -> Déplacer l'histogramme des totaux en fonction du bw sur la route track_rm

	- Graphique Indice de NUCKOLS en fonction du BW et date (c.f google)
	- Graphique mélangeant tous les formats de reps avec BW en abscisse (?)

- Empêcher le fait d'ajouter un exercice s'il y en a déjà un du même nom

- Mettre dans l'ordre chronologique en fonction de la date les perf sur advanced-edit

- Vérifier Token CSRF

- Add performance : prévoir l'erreur quand on ajoute un ',' ou un ';' à la place d'un point
pour un nombre flottant -> erreur quand on affichera la page graphique
    -> Ne pas oublier de convertir les données en pd.to_numeric()

- Alléger le code :
	- Route show_plot (faire une fonction pour le try/except car il n'y a que la fonction
	du dataframe qui change)

- Fichier __init__, regrouper les routes semblables par groupe dans un même fichier python
	- c.f favoris

- Pouvoir modifier le RPE